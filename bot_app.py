import telebot
from telebot import types
from config import convert
from config import actual
from exception import ConvertionException
from config import check_func

bot = telebot.TeleBot('5929517159:AAHEP_2ygmnCAzk0msJU8WHEmsQycFu2HzU')


@bot.message_handler(commands=["start"])
def start(message):
    keys = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç.')
    button2 = types.KeyboardButton('–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤–∞–ª—é—Ç.')
    keys.add(button1, button2)
    bot.send_message(message.chat.id, f'–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ '
                                      f'–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.')
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –≤–∞–ª—é—Ç—ã –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.'
                                      f'—Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ rub usd 100'.format(message.from_user), reply_markup=keys)
    bot.register_next_step_handler(message, menu)



@bot.message_handler(content_types=['text'])
def menu(message):
    mess = message.text.strip()
    if mess == '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç.':
        start(message)
    elif mess == '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤–∞–ª—é—Ç.':
        bot.send_message(message.chat.id, actual())
        bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –≤–∞–ª—é—Ç—ã –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ rub usd 100')
    else:
        quantity(message)

def quantity(message):
    user_input = message.text.split(' ')
    qua = user_input[2]
    try:
        if len(user_input) != 3:
            raise ConvertionException(f'–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö!.')
        if len(check_func(user_input[0], user_input[1])) != 2:
            raise ConvertionException(f'–í–∞–ª—é—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!.')
        float(qua)
    except ValueError:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞.\n{qua} –ù–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!')
    except ConvertionException as a:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞.\n{a}')
    except Exception as a:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞.\n{a}')
    else:
        res = convert(user_input[0], user_input[1])
        bot.send_message(message.chat.id, f' {round(res * float(qua), 2)}  {user_input[1]}')
        keys_up = types.InlineKeyboardMarkup(row_width=2)
        button1 = types.InlineKeyboardButton('üá∫üá∏USD/RUBüá∑üá∫', callback_data=f'USD RUB {qua}')
        button2 = types.InlineKeyboardButton('üá∫üá∏USD/EURüá™üá∫', callback_data=f'USD EUR {qua}')
        button3 = types.InlineKeyboardButton('üá∑üá∫RUB/EURüá™üá∫', callback_data=f'RUB EUR {qua}')
        button4 = types.InlineKeyboardButton('üá∑üá∫RUB/USDüá∫üá∏', callback_data=f'RUB USD {qua}')
        button5 = types.InlineKeyboardButton('üá∑üá∫RUB/THBüáπüá≠', callback_data=f'RUB THB {qua}')
        button6 = types.InlineKeyboardButton('üáπüá≠THB/RUBüá∑üá∫', callback_data=f'THB RUB {qua}')
        keys_up.add(button1, button2, button3, button4, button5, button6)
        bot.send_message(message.chat.id, f'üíµ–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–ª—é—Ç—ã'
                                          f'–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.üíµ', reply_markup=keys_up)
        bot.register_next_step_handler(message, menu)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    value = call.data.split(' ')
    summ, res = convert(value[0], value[1]), float(value[2])
    bot.send_message(call.message.chat.id, f' {round(res * summ, 2)}  {value[1]}')


bot.polling(none_stop=True, interval=0)